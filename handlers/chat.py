from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

import uuid
import logging

from handlers.common import BotStates, get_main_keyboard
from utils.message_utils import stream_response
from services.ai_service import AIService

# –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

@router.message(F.text == "üí¨ –ß–∞—Ç")
async def chat_button(message: Message, state: FSMContext):
    await message.answer("–ù—É —Å–ø—Ä–∞—à–∏–≤–∞–π, —è –∫–Ω–∏–∂–∫–∏ —á–∏—Ç–∞–ª.")
    await state.set_state(BotStates.Chat)
    await state.update_data(chat_id=str(uuid.uuid4()))

@router.message(StateFilter(BotStates.Chat))
async def chat_message(message: Message, state: FSMContext, ai_service: AIService, db):
    try:
        user_id = message.from_user.id
        username = message.from_user.full_name
        user_input = message.text
        
        data = await state.get_data()
        chat_id = data.get('chat_id')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        chat_history = db.get_chat_history(user_id, limit=5)
        messages = [{"role": "system", "content": "–¢—ã —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        for prev_msg, prev_resp in chat_history:
            messages.append({"role": "user", "content": prev_msg})
            messages.append({"role": "assistant", "content": prev_resp})
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        messages.append({"role": "user", "content": user_input})
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∏–º –æ—Ç–≤–µ—Ç–∞
        stream = await ai_service.chat_completion(messages, stream=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
        full_response, message_parts = await stream_response(message, stream)
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –±—ã–ª —Ä–∞–∑–±–∏—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –∫–∞–∫ —Ñ–∞–π–ª
        if len(message_parts) > 1:
            await message.answer("–û—Ç–≤–µ—Ç –±—ã–ª —Ä–∞–∑–±–∏—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π. –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ñ–∞–π–ª? –û—Ç–ø—Ä–∞–≤—å—Ç–µ /file")
            await state.update_data(last_full_response=full_response)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É
        db.add_message(user_id, username, user_input, full_response, chat_id)
        
    except Exception as e:
        logger.error(f"Error in chat processing: {e}", exc_info=True)
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}") 