from aiogram import F, Router
from aiogram.filters import Command, StateFilter, Text
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext

import os
import logging

from handlers.common import BotStates, get_main_keyboard
from services.ai_service import AIService
from utils.message_utils import send_long_message

# –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

@router.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def history_button(message: Message, db):
    if str(message.from_user.id) != os.getenv("ADMIN_ID"):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏")
        return
        
    try:
        history = db.get_all_history(limit=10)
        
        MAX_MESSAGE_LENGTH = 4000
        current_response = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
        
        for user_id, username, msg, resp, timestamp, chat_id in history:
            entry = f"üë§ {username} (ID: {user_id})\n"
            entry += f"‚è∞ Time: {timestamp}\n"
            entry += f"üí≠ Message: {msg}\n"
            
            if len(resp) > 500:
                resp = resp[:500] + "... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
                
            entry += f"ü§ñ Response: {resp}\n"
            entry += "‚ûñ" * 20 + "\n\n"
            
            if len(current_response) + len(entry) > MAX_MESSAGE_LENGTH:
                await message.answer(current_response)
                current_response = entry
            else:
                current_response += entry
        
        if current_response:
            await message.answer(current_response)
    
    except Exception as e:
        logger.error(f"Error fetching history: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏")

@router.message(Command('models'), flags={"always": True})
async def models_command(message: Message, ai_service: AIService):
    if str(message.from_user.id) != os.getenv("ADMIN_ID"):
        return
    
    try:    
        await message.answer("–ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
        models = await ai_service.get_available_models()
        
        if models:
            response = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n\n"
            for model in models:
                response += f"‚Ä¢ {model}\n"
            await message.answer(response)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
    
    except Exception as e:
        logger.error(f"Error fetching models: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π")

@router.message(F.text == "ü§ñ –ú–æ–¥–µ–ª–∏ AI")
async def ai_models_button(message: Message, state: FSMContext, ai_service: AIService):
    if str(message.from_user.id) != os.getenv("ADMIN_ID"):
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–º—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    current_state = await state.get_state()
    await state.update_data(previous_state=current_state)
    
    try:    
        await message.answer("–ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
        models = await ai_service.get_available_models()
        
        if not models:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–µ–ª—è–º–∏
        keyboard = []
        current_model = ai_service.get_current_model()
        
        for model in models:
            # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –∑–≤–µ–∑–¥–æ—á–∫–æ–π
            model_text = f"‚úÖ {model}" if model == current_model else model
            keyboard.append([KeyboardButton(text=model_text)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
        
        reply_markup = ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True,
            one_time_keyboard=False
        )
        
        await message.answer(
            f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {current_model}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        await state.set_state(BotStates.ChooseModel)
    
    except Exception as e:
        logger.error(f"Error showing AI models: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π")

@router.message(StateFilter(BotStates.ChooseModel))
async def process_model_selection(message: Message, state: FSMContext, ai_service: AIService):
    if str(message.from_user.id) != os.getenv("ADMIN_ID"):
        await state.clear()
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        data = await state.get_data()
        previous_state = data.get('previous_state')
        
        if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
            if previous_state:
                await state.set_state(previous_state)
            else:
                await state.clear()
                
            await message.answer(
                "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é",
                reply_markup=get_main_keyboard(message)
            )
            return
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        selected_model = message.text
        if selected_model.startswith("‚úÖ "):
            selected_model = selected_model[2:].strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –º–æ–¥–µ–ª—å
        models = await ai_service.get_available_models()
        if selected_model not in models:
            await message.answer(
                f"–ú–æ–¥–µ–ª—å '{selected_model}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.",
                reply_markup=get_main_keyboard(message)
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            if previous_state:
                await state.set_state(previous_state)
            else:
                await state.clear()
                
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
        ai_service.set_current_model(selected_model)
        
        await message.answer(
            f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {selected_model}",
            reply_markup=get_main_keyboard(message)
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        if previous_state:
            await state.set_state(previous_state)
        else:
            await state.clear()
            
    except Exception as e:
        logger.error(f"Error selecting model: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏")
        await state.clear()