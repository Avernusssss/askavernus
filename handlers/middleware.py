from aiogram import types
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from typing import Dict, Any, Callable, Awaitable
import logging

logger = logging.getLogger(__name__)

class CommandMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[types.Message, Dict[str, Any]], Awaitable[Any]],
        event: types.Message,
        data: Dict[str, Any]
    ) -> Any:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /)
        if event.text and event.text.startswith('/'):
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –æ–±–æ–∑–Ω–∞—á–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É
            data["is_command"] = True
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ '/'
            command = event.text.split()[0][1:]
            data["command"] = command
            
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–µ–Ω state, –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
            if data.get("state") is not None:
                original_state = data["state"]
                data["original_state"] = original_state
                data["state"] = None
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        result = await handler(event, data)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π state, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        if "original_state" in data:
            data["state"] = data["original_state"]
            
        return result

    async def on_process_message(self, message: types.Message, data: Dict[str, Any]):
        # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        priority_commands = ['/models', 'ü§ñ –ú–æ–¥–µ–ª–∏ AI', 'üìú –ò—Å—Ç–æ—Ä–∏—è']
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if isinstance(message, types.Message) and message.text:
            logger.info(f"Middleware received message: {message.text}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞
            if message.text in priority_commands:
                logger.info(f"Priority command detected: {message.text}")
                
                # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                state = data.get('state')
                if state:
                    current_state = await state.get_state()
                    logger.info(f"Current state before handling: {current_state}")
                    
                    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
                    await state.clear()
                    logger.info("State cleared for priority command")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
                    result = await handler(message, data)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    new_state = await state.get_state()
                    logger.info(f"State after handling: {new_state}")
                    
                    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
                    if new_state is None and current_state:
                        logger.info(f"Restoring previous state: {current_state}")
                        await state.set_state(current_state)
                    
                    return result
        
        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        return await handler(message, data) 