from g4f import AsyncClient
from googletrans import Translator
from database import Database
import uuid

import logging
import asyncio
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

load_dotenv()

logging.basicConfig(level=logging.INFO)

bot = Bot(os.getenv("BOT_TOKEN"))
dp = Dispatcher()
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = Database('bot_history.db')

class ChoosingBot(StatesGroup):
    Gpt = State()
    Img = State()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_main_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üí¨ –ß–∞—Ç"),
                KeyboardButton(text="üé® –ö–∞—Ä—Ç–∏–Ω–∫–∞"),
            ],
            [
                KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è")
            ]
        ],
        resize_keyboard=True,
        persistent=True
    )
    return keyboard

@dp.message(Command('start'))
async def start_command(message: types.Message):
    await message.answer(
        "–í—ã–±–∏—Ä–∞–π —á–µ —Ç–µ –Ω–∞–¥–æ, –ø–µ–Ω—Ç—é—Ö",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
@dp.message(F.text == "üí¨ –ß–∞—Ç")
async def chat_button(message: types.Message, state: FSMContext):
    await message.answer("–ù—É —Å–ø—Ä–∞—à–∏–≤–∞–π, —è –∫–Ω–∏–∂–∫–∏ —á–∏—Ç–∞–ª.")
    await state.set_state(ChoosingBot.Gpt)
    await state.update_data(chat_id=str(uuid.uuid4()))

@dp.message(F.text == "üé® –ö–∞—Ä—Ç–∏–Ω–∫–∞")
async def image_button(message: types.Message, state: FSMContext):
    await message.answer("–ß–µ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å?")
    await state.set_state(ChoosingBot.Img)

@dp.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def history_button(message: types.Message):
    if str(message.from_user.id) != os.getenv("ADMIN_ID"):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏")
        return
        
    history = db.get_all_history(limit=10)
    
    response = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
    for user_id, username, msg, resp, timestamp, chat_id in history:
        response += f"üë§ {username} (ID: {user_id})\n"
        response += f"‚è∞ Time: {timestamp}\n"
        response += f"üí≠ Message: {msg}\n"
        response += f"ü§ñ Response: {resp}\n"
        response += "‚ûñ" * 20 + "\n\n"
    
    await message.answer(response)

# ChatGPT
@dp.message(StateFilter("ChoosingBot:Gpt"))
async def send_answer_request(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.full_name  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
    user_input = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    chat_id = data.get('chat_id')

    print(user_input)
    msg = await message.answer("–©–∞ –ø–∞–∂–∂–∏")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        chat_history = db.get_chat_history(user_id, limit=5)
        messages = [{"role": "system", "content": "–¢—ã —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        for prev_msg, prev_resp in chat_history:
            messages.append({"role": "user", "content": prev_msg})
            messages.append({"role": "assistant", "content": prev_resp})
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        messages.append({"role": "user", "content": user_input})

        client = AsyncClient()
        response = await client.chat.completions.create(
            model="deepseek-chat",
            messages=messages,
            web_search=False
        )

        response_text = response.choices[0].message.content
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.add_message(user_id, username, user_input, response_text, chat_id)
        
        await msg.edit_text(response_text, parse_mode='Markdown')

    except Exception as e:
        print("Error: ", e)
        await msg.edit_text("–ù—É –∏ —Ö—É–π–Ω—é —Ç—ã —Å–º–æ—Ä–æ–∑–∏–ª...", parse_mode='Markdown')

# image
@dp.message(StateFilter("ChoosingBot:Img"))
async def send_image(message: types.Message):
    user_input = await (translate_text(str(message.text)))
    msg = await message.answer("–ù—É–∂–Ω–æ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, –ø–∞–∂–∂–∏")
    try:
        client = AsyncClient()
        response = await client.images.generate(
            prompt=user_input,
            model="flux",

            response_format="url"
        )
        await msg.edit_text(f"–ù–∞:\n{response.data[0].url}")
    except Exception as e:
        print("Error in generating image: ", e)
        await msg.edit_text("–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –Ω–µ—Ç...")

async def translate_text(data: str):
    async with Translator() as translator:
        result = await translator.translate(data, dest='en', src='ru')
        return (result.text)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
